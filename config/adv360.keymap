#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        #include "macros.dtsi"
      #include "version.dtsi"
      #ifndef VERSION_MACRO

        vim_write: vim_write {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp W>;
            label = "VIM_WRITE";
        };

        vim_quit: vim_quit {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp COLON &kp Q>;
            label = "VIM_QUIT";
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <280>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;

            require-prior-idle-ms = <100>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <29 30 31 32 41 42 43 44 15 65 16 63 64 24>;
            hold-trigger-on-release;
        };

        backspace: backspace {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE";
            bindings = <&none>, <&none>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            hold-trigger-key-positions = <65>;
        };
    };

    macros {
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&trans   &trans          &trans          &trans              &trans            &trans  &mo 4                                                                    &mo 4        &trans  &trans             &trans               &trans             &trans           &trans
&kp TAB  &kp Q           &kp W           &kp F               &kp P             &kp B   &none                                                                    &none        &kp J   &kp L              &kp U                &kp Y              &kp SEMICOLON    &trans
&kp ESC  &hm LEFT_WIN A  &hm LEFT_ALT R  &hm LEFT_CONTROL S  &hm LEFT_SHIFT T  &kp G   &tog 2           &trans            &trans        &trans     &trans       &none        &kp M   &hm RIGHT_SHIFT N  &hm RIGHT_CONTROL E  &hm RIGHT_ALT I    &hm RIGHT_GUI O  &trans
&trans   &kp Z           &kp X           &kp C               &kp D             &kp V                                      &kp HOME      &kp PG_UP                            &kp K   &kp H              &kp COMMA            &kp DOT            &kp SLASH        &trans
&mo 3    &caps_word      &trans          &kp LEFT_ARROW      &kp RIGHT                 &lt 5 BACKSPACE  &lt 1 LEFT_SHIFT  &kp END       &kp PG_DN  &lt 1 ENTER  &lt 2 SPACE          &kp UP_ARROW       &kp DOWN             &kp C_VOLUME_DOWN  &kp C_VOL_UP     &mo 4
            >;
        };

        layer_symbols {
            bindings = <
&trans  &trans           &trans          &trans        &trans         &trans         &trans                                             &trans  &trans         &trans        &trans        &trans         &trans       &trans
&trans  &kp SQT          &kp TILDE       &kp HASH      &kp AMPERSAND  &kp PIPE       &trans                                             &trans  &kp LS(CARET)  &kp LS(LBRC)  &kp LS(RBRC)  &kp LBKT       &kp RBKT     &trans
&trans  &kp EXCLAMATION  &kp UNDERSCORE  &kp COLON     &kp EQUAL      &kp DOLLAR     &trans         &trans  &trans      &trans  &trans  &trans  &kp LS(AT)     &kp LS(LPAR)  &kp LS(RPAR)  &kp LS(UNDER)  &kp SEMI     &trans
&trans  &kp PERCENT      &kp QUESTION    &kp ASTERISK  &kp PLUS       &kp BACKSLASH                         &trans      &trans                  &kp FSLH       &kp MINUS     &kp LS(LT)    &kp LS(GT)     &kp LS(DQT)  &trans
&trans  &trans           &trans          &trans        &trans                        &kp BACKSPACE  &trans  &trans      &trans  &trans  &trans                 &trans        &trans        &trans         &trans       &trans
            >;
        };

        layer_nav {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                         &trans     &trans     &trans     &trans     &trans        &trans     &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                         &trans     &kp RC(Y)  &kp RC(V)  &kp RC(C)  &kp RC(X)     &kp RC(Z)  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans  &trans  &trans  &trans      &trans  &trans     &tog 0     &kp CAPS   &kp LEFT   &kp DOWN   &kp UP_ARROW  &kp RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans                  &trans      &trans                        &kp INS    &kp HOME   &kp PG_DN  &kp PG_UP     &kp END    &trans
&trans  &trans    &trans    &trans     &trans             &trans  &trans  &trans      &trans  &kp ENTER  &kp SPACE             &trans     &trans     &trans        &trans     &trans
            >;
        };

        fn {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans  &tog 0                                      &mo 3   &trans        &trans  &trans  &trans  &trans   &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                      &none   &trans        &kp F7  &kp F8  &kp F9  &kp F10  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans  &to 0   &trans  &trans      &trans  &trans  &trans  &kp RS(F11)   &kp F4  &kp F5  &kp F6  &kp F11  &trans
&trans  &trans    &trans    &trans     &trans     &trans                  &trans      &trans                  &kp LC(PLUS)  &kp F1  &kp F2  &kp F3  &kp F12  &trans
&trans  &trans    &trans    &trans     &trans             &trans  &trans  &trans      &trans  &trans  &trans                &trans  &trans  &trans  &trans   &trans
            >;
        };

        mod_macros {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                              &trans                  &none  &none       &none       &none  &none  &none
&none  &vim_quit     &vim_quit     &trans        &trans        &none         &bootloader                                                        &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &trans        &trans        &trans        &none         &none        &bootloader  &none           &trans      &bootloader  &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &trans        &trans        &trans        &none                                   &bt BT_CLR      &bt BT_CLR                                       &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &bl BL_DEC   &bl BL_INC   &bl BL_TOG      &none       &kp C_PP     &kp C_MUTE                     &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };

        layer_num {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                      &trans        &trans        &trans  &trans  &trans  &trans        &trans
&trans  &trans    &trans    &trans     &trans     &trans  &trans                                      &trans        &kp LS(PLUS)  &kp N7  &kp N8  &kp N9  &kp LS(STAR)  &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans  &trans  &trans  &trans      &trans  &trans  &trans        &kp MINUS     &kp N4  &kp N5  &kp N6  &kp FSLH      &trans
&trans  &trans    &trans    &trans     &trans     &trans                  &trans      &trans                        &kp EQUAL     &kp N1  &kp N2  &kp N3  &kp BSLH      &trans
&trans  &trans    &trans    &trans     &trans             &trans  &trans  &trans      &trans  &trans  &kp NUMBER_0                &trans  &trans  &trans  &trans        &trans
            >;
        };
    };
};
